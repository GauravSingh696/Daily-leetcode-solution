class Solution {
public:
    int bfs(int curr, unordered_map<int, vector<int>> &adj, int d, int n) {
        queue<pair<int, int>> que;
        que.push({curr, 0});

        vector<int> visited(n, false);
        visited[curr] = true;

        int count = 0;

        while(!que.empty()) {
            int node = que.front().first;
            int dist = que.front().second;
            que.pop();

            if(dist > d)
                continue;
            
            count++;

            for(auto &ngbr : adj[node]) {
                if(!visited[ngbr]) {
                    visited[ngbr] = true;
                    que.push({ngbr, dist+1});
                }
            }
        }

        return count;
    }

    vector<int> findCount(vector<vector<int>> &edges, int d) {
        int n = edges.size() + 1;
        unordered_map<int, vector<int>> adj;

        for(auto &it : edges) {
            int u = it[0];
            int v = it[1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        vector<int> result(n);

        for(int i=0;i<n;i++) {
            result[i] = bfs(i, adj, d, n);
        }

        return result;
    }

    vector<int> maxTargetNodes(vector<vector<int>>& edges1, vector<vector<int>>& edges2, int k) {
        vector<int> result1 = findCount(edges1, k);
        vector<int> result2 = findCount(edges2, k-1);
        
        int maxTargetNodeCount = *max_element(result2.begin(), result2.end());

        for(int i=0;i<result1.size();i++) {
            result1[i] += maxTargetNodeCount;
        }

        return result1;
    }
};
